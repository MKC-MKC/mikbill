<?php

declare(strict_types=1);

namespace Haikiri\MikBiLL\Tests;

use Haikiri\MikBiLL\Tests\Mock\MikBiLLApiMock as MikBiLLApi;
use PHPUnit\Framework\TestCase;

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ç–∏–∫–µ—Ç–æ–≤.
 * @cabinet - –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã —Ç—Ä–µ–±—É—é—Ç —Ç–æ–∫–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞.
 */
class TicketsTest extends TestCase
{
	private static MikBiLLApi $MikBiLL;
	private static bool $debug = false;
	private static string $signKey = "not-expected";
	private static ?string $token = "Bearer eyJ0eXAiOi.JKV1QiLCJ.hbGciOiJIUzI.1NiJ9";

	public static function processData($path): void
	{
		# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
		$json = file_get_contents($path);

		# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MikBiLL SDK.
		self::$MikBiLL = new MikBiLLApi(
			url: "http://api.mikbill.local",
			key: self::$signKey,
			mockedData: $json,
		);

		# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		self::$MikBiLL->setUserToken(self::$token);
	}

	/**
	 * –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö —Ç–∏–∫–µ—Ç–æ–≤.
	 */
	public function test_view_tickets($expected = "14.11.2022 –≤ 15:17:36")
	{
		# –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API.
		self::processData(path: __DIR__ . "/Responses/valid/Cabinet/tickets/tickets.get.json");

		# –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∏–ª–ª–∏–Ω–≥.
		$response = self::$MikBiLL->cabinet->Tickets()->getTickets();

		# –ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω debug.
		if (self::$debug) {
			foreach ($response as $ticket) {
				$status = $ticket->isClosed() ? "üìõ [–∑–∞–∫—Ä—ã—Ç–æ]" : "‚è≥ [–æ—Ç–∫—Ä—ã—Ç–æ]";
				echo sprintf(
					"<hr><h2><small>%s</small> –û–±—Ä–∞—â–µ–Ω–∏–µ: <code>[id:%s]</code> | –æ—Ç–∫—Ä—ã—Ç–æ %s</h2>",
					$status,
					$ticket->getId(),
					$ticket->getDate()?->format("d.m.Y –≤ H:i:s") ?? ""
				);
				echo "<p>–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</p><code>{$ticket->getMessage()}</code>";
			}
		}

		# –î–ª—è —Ç–µ—Å—Ç–∞, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞.
		$getOne = $response[0];
		$data = $getOne->getDate()?->format("d.m.Y –≤ H:i:s");
		$this->assertEquals($expected, $data);
	}

	/**
	 * –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç.
	 */
	public function test_new_ticket()
	{
		# –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API.
		$json = json_encode(
			[
				"success" => true,
				"code" => 0,
				"data" => [
					"ticketid" => $expected = (string)rand(min: 1, max: 100) # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ID —Ç–∏–∫–µ—Ç–∞.
				]
			]
		);

		# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–∏–ª–ª–∏–Ω–≥.
		$MikBiLL = new MikBiLLApi(
			url: "http://api.mikbill.local",
			key: self::$signKey,
			mockedData: $json,
		);

		# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω.
		$MikBiLL->setUserToken(self::$token);

		# –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∏–ª–ª–∏–Ω–≥.
		$response = $MikBiLL->cabinet->Tickets()->newTicket("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç —Ç–∏–∫–µ—Ç.");

		# –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞.
		$data = $response->getId();

		# –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
		$message = "–°–æ–∑–¥–∞–Ω —Ç–∏–∫–µ—Ç ID: $data. –û–∂–∏–¥–∞–ª—Å—è ID: $expected.";

		# –°–º–æ—Ç—Ä–∏–º –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω debug.
		if (self::$debug) echo $message . str_repeat(PHP_EOL, 2);

		# –°–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
		$this->assertEquals($expected, $data, $message);
	}

	/**
	 * –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.
	 */
	public function test_view_ticket_messages($expected = "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç —Ç–∏–∫–µ—Ç.")
	{
		# –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API.
		self::processData(path: __DIR__ . "/Responses/valid/Cabinet/tickets/tickets.get-ID.json");

		# –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∏–ª–ª–∏–Ω–≥.
		$response = self::$MikBiLL->cabinet->Tickets()->getTicketsDialog("–¢—É—Ç –≤–∞—à ID —Ç–∏–∫–µ—Ç–∞");

		# –ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω debug.
		if (self::$debug) {
			foreach ($response as $ticket) {
				$type = $ticket->isMessageFromClient() ? "–∫–ª–∏–µ–Ω—Ç" : "–æ–ø–µ—Ä–∞—Ç–æ—Ä";

				$name = $ticket->isMessageFromClient()
					? trim("{$ticket->getUserFirstName()} {$ticket->getUserMiddleName()}")
					: $ticket->getOperatorLogin();

				echo "<hr><p>[–°–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ{$ticket->getMessageId()}] –Ω–∞–ø–∏—Å–∞–ª $type <b>$name</b></p>";
				echo "<p>–°–æ–æ–±—â–µ–Ω–∏–µ:</p><code>{$ticket->getMessageTest()}</code>";
				echo str_repeat(PHP_EOL, 2);
			}
		}

		# –î–ª—è —Ç–µ—Å—Ç–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
		$getOne = $response[0];
		$data = $getOne->getMessageTest();
		$this->assertEquals($expected, $data);
	}

}
